@page
@model LoCoMPro_LV.Pages.Records.IndexModel
@{
    ViewData["Title"] = "Consulta";
}

<div class="container container-search index align-items-center">
    <div class="row">
        <form method="get" asp-page="/Records/Index">
            <div class=" buscar-form">
                <div class="col">
                    <div class="form-group">
                        <label class="searchString" for="SearchString">Nombre del producto</label>
                        <div class="row d-flex justify-content-center align-items-center">
                            <div class="col-10">
                                <div class="input-group mb-3 loupe-text">
                                    <input type="text" name="SearchString" id="SearchString" value="@Model.SearchString" class="form-control" oninput="toggleSearchButton()" />
                                    <input class=" loupe-button btn btn-light" id="button-addon2" type="submit" value="Buscar">
                                </div>
                            </div>
                            <div class="col-2">
                                <input type="button" value="Opciones avanzadas" class="advanced_search btn btn-primary" data-bs-toggle="collapse" data-bs-target="#advancedSearch" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                            </div>
                        </div>
                    </div>
                </div>
                <div id="advancedSearch" class="collapse">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group_advanced">
                                <label for="Province">Provincia</label>
                                <select id="Province" asp-for="SearchProvince" asp-items="Model.Provinces" class="form-control_advanced form-control">
                                    <option value="">Todas</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_advanced">
                                <label for="Canton">Cantón</label>
                                <select id="Canton" asp-for="SearchCanton" class="form-control_advanced form-control">
                                    <option value="">Todos</option>
                                    @foreach (var province in Model.Cantons.Keys)
                                    {
                                        <optgroup label="@province">
                                            @foreach (var canton in Model.Cantons[province])
                                            {
                                                <option value="@canton">@canton</option>
                                            }
                                        </optgroup>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_advanced">
                                <label for="Category">Categoría</label>
                                <select id="Category" asp-for="SearchCategory" asp-items="Model.Categories" class="form-control_advanced form-control">
                                    <option value="">Todas</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var provinceDropdown = document.getElementById("Province");
        var cantonDropdown = document.getElementById("Canton");
        var cantonsByProvince = @Html.Raw(Json.Serialize(Model.Cantons));

        function actualizarDropdownCantones() {
            var selectedProvince = provinceDropdown.value;
            cantonDropdown.innerHTML = '';
            var defaultOption = document.createElement("option");
            defaultOption.value = "";
            defaultOption.text = "Todos";
            cantonDropdown.appendChild(defaultOption);

            if (selectedProvince in cantonsByProvince) {
                cantonsByProvince[selectedProvince].forEach(function (canton) {
                    var option = document.createElement("option");
                    option.value = canton;
                    option.text = canton;
                    cantonDropdown.appendChild(option);
                });
            }
        }

        provinceDropdown.addEventListener("change", actualizarDropdownCantones);
        actualizarDropdownCantones();
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var advancedSearch = document.getElementById("advancedSearch");
        var provinceDropdown = document.getElementById("Province");
        var cantonDropdown = document.getElementById("Canton");
        var categoryDropdown = document.getElementById("Category");

        var isProvinceSelected = provinceDropdown.value !== "";
        var isCantonSelected = cantonDropdown.value !== "";
        var isCategorySelected = categoryDropdown.value !== "";

        if (isProvinceSelected || isCantonSelected || isCategorySelected) {
            advancedSearch.classList.add("show");
        } else {
            advancedSearch.classList.remove("show");
        }
    });
</script>

<script>
    window.addEventListener('DOMContentLoaded', (event) => {
        toggleSearchButton();
    });

    function toggleSearchButton() {
        const searchStringInput = document.getElementById("SearchString");
        const searchButton = document.getElementById("button-addon2");

        if (searchStringInput.value.trim() !== "") {
            searchButton.disabled = false;
        } else {
            searchButton.disabled = true;
        }
    }
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var cantonDropdown = document.getElementById("Canton");
        var selectedCanton = cantonDropdown.value;

        document.querySelector("form").addEventListener("submit", function () {
            var formAction = this.getAttribute("action");
            var updatedAction = formAction + "?SearchCanton=" + encodeURIComponent(selectedCanton);
            this.setAttribute("action", updatedAction);
        });
    });

    window.addEventListener('load', function () {
        var cantonDropdown = document.getElementById("Canton");
        var selectedCanton = getParameterByName("SearchCanton");

        if (selectedCanton) {
            cantonDropdown.value = selectedCanton;
        }
    });

    function getParameterByName(name, url) {
        if (!url) {
            url = window.location.href;
        }
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }
</script>

<table class="table" id="miTabla">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Record[0].Record.NameProduct)
            </th>
            <th class="precio" id="priceColumn">
                <a class="a-ordering" id="orderPrice">@Html.DisplayNameFor(model => model.Record[0].Record.Price)</a>
                <span class="arrow" id="priceArrow"></span>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Record[0].Record.NameStore)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Record[0].Store.NameProvince)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Record[0].Store.NameCanton)
            </th>
            <th class="date" id="dateColumn">
                <a class="a-ordering" id="orderDate">@Html.DisplayNameFor(model => model.Record[0].Record.RecordDate)</a>
                <span class="arrow" id="dateArrow"></span>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var firstItem in Model.Record)
        {

            <tr>
                <td>
                    <div class="table-item">
                        <a class="election" asp-page="./Details" asp-route-NameGenerator="@firstItem.Record.NameGenerator" asp-route-RecordDate="@firstItem.Record.RecordDate.ToString("yyyy-MM-dd HH:mm:ss")">@Html.DisplayFor(modelItem => firstItem.Record.NameProduct)</a>
                    </div>
                </td>
                <td>
                    <div class="table-item precio">
                        ₡@Html.DisplayFor(modelItem => firstItem.Record.Price)
                    </div>
                </td>
                <td>
                    <div class="table-item">
                        @Html.DisplayFor(modelItem => firstItem.Record.NameStore)
                    </div>
                </td>
                <td>
                    <div class="table-item">
                        @Html.DisplayFor(modelItem => firstItem.Store.NameProvince)
                    </div>
                </td>
                <td>
                    <div class="table-item">
                        @Html.DisplayFor(modelItem => firstItem.Store.NameCanton)
                    </div>
                </td>
                <td>
                    <div class="table-item fecha">
                        @Html.DisplayFor(modelItem => firstItem.Record.RecordDate)
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<div id="pagination" class="pagination">
    <button id="previousPage" class="page-link">Anterior</button>
    <button id="nextPage" class="page-link">Siguiente</button>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var tabla = document.getElementById("miTabla");
        var tableBody = tabla.querySelector("tbody");
        var pagination = document.getElementById("pagination");
        var registrosPorPagina = 10;
        var currentPage = 1;
        var sortOrderPrice = "asc";
        var sortOrderDate = "desc";
        var currentSortColumn = null;

        // Esta función se encarga de mostrar las filas de la tabla que deben estar visibles en la página actual. 
        // Filtra las filas según la página actual y oculta las demás.
        function mostrarFilas() {
            var filas = tableBody.querySelectorAll("tr");
            var inicio = (currentPage - 1) * registrosPorPagina;
            var fin = currentPage * registrosPorPagina;

            filas.forEach(function (fila, index) {
                if (index >= inicio && index < fin) {
                    fila.style.display = "table-row";
                } else {
                    fila.style.display = "none";
                }
            });
        }

        // Esta función se encarga de ordenar la tabla por el precio de los productos en orden ascendente o descendente. 
        // Utiliza el valor de sortOrderPrice para determinar el orden y actualiza la tabla en consecuencia.
        function ordenarTablaPorPrecio() {
            var filas = Array.from(tableBody.querySelectorAll("tr"));

            filas.sort(function (a, b) {
                var valueA = a.querySelector(".precio").textContent.replace("₡", "").trim();
                var valueB = b.querySelector(".precio").textContent.replace("₡", "").trim();

                if (sortOrderPrice === "asc") {
                    return parseFloat(valueA) - parseFloat(valueB);
                } else {
                    return parseFloat(valueB) - parseFloat(valueA);
                }
            });

            filas.forEach(function (fila) {
                tableBody.removeChild(fila);
            });

            filas.forEach(function (fila) {
                tableBody.appendChild(fila);
            });
        }

        // Esta función se encarga de ordenar la tabla por la fecha de los registros en orden ascendente o descendente. 
        // Utiliza el valor de sortOrderDate para determinar el orden y actualiza la tabla en consecuencia.
        function ordenarTablaPorFecha() {
            var filas = Array.from(tableBody.querySelectorAll("tr"));

            filas.sort(function (a, b) {
                var dateA = new Date(a.querySelector(".fecha").textContent.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$2/$1/$3'));
                var dateB = new Date(b.querySelector(".fecha").textContent.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$2/$1/$3'));

                if (sortOrderDate === "asc") {
                    return dateA - dateB;
                } else {
                    return dateB - dateA;
                }
            });

            filas.forEach(function (fila) {
                tableBody.removeChild(fila);
            });

            filas.forEach(function (fila) {
                tableBody.appendChild(fila);
            });
        }

        // Genera la paginación en la parte inferior de la tabla. Calcula el número de páginas y muestra los botones de 
        // navegación para ir a páginas anteriores y siguientes. Además, muestra un número limitado de botones de página alrededor de la página actual.
        function generarPaginacion() {
            var filas = tableBody.querySelectorAll("tr");
            var totalRegistros = filas.length;
            var totalPaginas = Math.ceil(totalRegistros / registrosPorPagina);
            var paginaCercana = 2;

            var html = "";

            var inicioPaginacion = Math.max(1, currentPage - paginaCercana);
            var finPaginacion = Math.min(totalPaginas, currentPage + paginaCercana);

            if (currentPage > 1) {
                html += '<button class="page-link" data-page="' + (currentPage - 1) + '">Anterior</button>';
            }

            if (currentPage > (paginaCercana + 1)) {
                html += '<button class="page-link" data-page="1">1</button>';
                if (currentPage > (paginaCercana + 2)) {
                    html += '<span class="page-link">...</span>';
                }
            }

            for (var i = inicioPaginacion; i <= finPaginacion; i++) {
                var isCurrentPage = i === currentPage ? 'current-page' : '';
                html += '<button class="page-link ' + isCurrentPage + '" data-page="' + i + '">' + i + '</button>';
            }

            if (currentPage < (totalPaginas - paginaCercana)) {
                if (currentPage < (totalPaginas - paginaCercana - 1)) {
                    html += '<span class="page-link">...</span>';
                }
                html += '<button class="page-link" data-page="' + totalPaginas + '">' + totalPaginas + '</button>';
            }

            if (currentPage < totalPaginas) {
                html += '<button class="page-link" data-page="' + (currentPage + 1) + '">Siguiente</button>';
            }

            pagination.innerHTML = html;

            var pageButtons = pagination.querySelectorAll("button");

            pageButtons.forEach(function (button) {
                button.addEventListener("click", function () {
                    currentPage = parseInt(this.getAttribute("data-page"));
                    if (currentSortColumn === "precio") {
                        ordenarTablaPorPrecio();
                    } else if (currentSortColumn === "fecha") {
                        ordenarTablaPorFecha();
                    }
                    mostrarFilas();
                    generarPaginacion();
                });
            });
        }

        var orderPriceLink = document.getElementById("orderPrice");
        orderPriceLink.addEventListener("click", function () {
            if (sortOrderPrice === "asc") {
                sortOrderPrice = "desc";
                document.getElementById("priceArrow").innerHTML = " &#129095;";
                document.getElementById("dateArrow").innerHTML = "";
            } else {
                sortOrderPrice = "asc";
                document.getElementById("priceArrow").innerHTML = "&#129093;";
                document.getElementById("dateArrow").innerHTML = "";
            }
            currentSortColumn = "price";
            ordenarTablaPorPrecio();
            mostrarFilas();
            generarPaginacion();
        });

        var orderDateLink = document.getElementById("orderDate");
        orderDateLink.addEventListener("click", function () {
            if (sortOrderDate === "asc") {
                sortOrderDate = "desc";
                document.getElementById("dateArrow").innerHTML = " &#129095;";
                document.getElementById("priceArrow").innerHTML = "";
            } else {
                sortOrderDate = "asc";
                document.getElementById("dateArrow").innerHTML = " &#129093;";
                document.getElementById("priceArrow").innerHTML = "";
            }
            currentSortColumn = "date";
            ordenarTablaPorFecha();
            mostrarFilas();
            generarPaginacion();
        });

        mostrarFilas();
        generarPaginacion();
    });
</script>
