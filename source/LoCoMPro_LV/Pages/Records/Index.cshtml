@page
@model LoCoMPro_LV.Pages.Records.IndexModel
@{
    ViewData["Title"] = "Consulta";
}

<div class="container container-search index align-items-center">
    <div class="row">
        <form method="get" asp-page="/Records/Index">
            <div class=" buscar-form">
                <div class="col">
                    <div class="form-group">
                        <label class="searchString" for="SearchString">Nombre del producto</label>
                        <div class="row d-flex justify-content-center align-items-center">
                            <div class="col-10">
                                <div class="input-group mb-3 loupe-text">
                                    <input type="text" name="SearchString" id="SearchString" value="@Model.SearchString" class="form-control" oninput="toggleSearchButton()" />
                                    <input class=" loupe-button btn btn-light" id="button-addon2" type="submit" value="Buscar">
                                </div>
                            </div>
                            <div class="col-2">
                                <input type="button" value="Opciones avanzadas" class="advanced_search btn btn-primary" data-bs-toggle="collapse" data-bs-target="#advancedSearch" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                            </div>
                        </div>
                    </div>
                </div>
                <div id="advancedSearch" class="collapse">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group_advanced">
                                <label for="Province">Provincia</label>
                                <select id="Province" asp-for="SearchProvince" asp-items="Model.Provinces" class="form-control_advanced form-control">
                                    <option value="">Todas</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_advanced">
                                <label for="Canton">Cantón</label>
                                <select id="Canton" name="SearchCanton" asp-items="Model.Cantons" class="form-control_advanced form-control">
                                    <option value="">Todos</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group_advanced">
                                <label for="Category">Categoría</label>
                                <select id="Category" asp-for="SearchCategory" asp-items="Model.Categories" class="form-control_advanced form-control">
                                    <option value="">Todas</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var advancedSearch = document.getElementById("advancedSearch");
        var provinceDropdown = document.getElementById("Province");
        var cantonDropdown = document.getElementById("Canton");
        var categoryDropdown = document.getElementById("Category");

        var isProvinceSelected = provinceDropdown.value !== "";
        var isCantonSelected = cantonDropdown.value !== "";
        var isCategorySelected = categoryDropdown.value !== "";

        if (isProvinceSelected || isCantonSelected || isCategorySelected) {
            advancedSearch.classList.add("show");
        } else {
            advancedSearch.classList.remove("show");
        }
    });
</script>

<script>
    window.addEventListener('DOMContentLoaded', (event) => {
        toggleSearchButton();
    });

    function toggleSearchButton() {
        const searchStringInput = document.getElementById("SearchString");
        const searchButton = document.getElementById("button-addon2");

        if (searchStringInput.value.trim() !== "") {
            searchButton.disabled = false;
        } else {
            searchButton.disabled = true;
        }
    }
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var provinceDropdown = document.getElementById("Province");
        var cantonDropdown = document.getElementById("Canton");

        var cantonsByProvince = {
            "San José": ["San José", "Escazú", "Desamparados", "Puriscal", "Tarrazú", "Aserrí", "Mora", "Goicoechea", "Santa Ana", "Alajuelita", "Vásquez de Coronado", "Acosta", "Tibás", "Moravia", "Montes de Oca", "Turrubares", "Dota", "Curridabat", "Pérez Zeledón", "León Cortés"],
            "Alajuela": ["San Carlos", "Upala", "Los Chiles", "San Ramón", "Guatuso", "Alajuela", "Rio Cuarto", "Zarcero", "Orotina", "Grecia", "Atenas", "Naranjo", "San Mateo", "Sarchí", "Poás", "Palmares"],
            "Heredia": ["Heredia", "Barva", "Santo Domingo", "Santa Bárbara", "San Rafael", "San Isidro", "Belén", "Flores", "San Pablo", "Sarapiquí"],
            "Cartago": ["Cartago", "Paraíso", "La Unión", "Jiménez", "Turrialba", "Alvarado", "Oreamuno", "El Guarco"],
            "Puntarenas": ["Puntarenas", "Esparza", "Buenos Aires", "Montes de Oro", "Osa", "Quepos", "Golfito", "Coto Brus", "Parrita", "Corredores", "Garabito", "Puerto Jiménez", "Monte Verde"],
            "Guanacaste": ["Liberia", "Nicoya", "Santa Cruz", "Bagaces", "Carrillo", "Cañas", "Abangares", "Tilarán", "Nandayure", "La Cruz", "Hojancha"],
            "Limón": ["Limón", "Pococí", "Siquirres", "Talamanca", "Matina", "Guácimo"]
        };

        function actualizarDropdownCantones() {
            var selectedProvince = provinceDropdown.value;
            cantonDropdown.innerHTML = '';

            var defaultOption = document.createElement("option");
            defaultOption.value = "";
            defaultOption.text = "Todos";
            cantonDropdown.appendChild(defaultOption);

            if (selectedProvince && cantonsByProvince[selectedProvince]) {
                cantonsByProvince[selectedProvince].forEach(function (canton) {
                    var option = document.createElement("option");
                    option.value = canton;
                    option.text = canton;
                    cantonDropdown.appendChild(option);
                });
            }
        }

        provinceDropdown.addEventListener("change", actualizarDropdownCantones);

        actualizarDropdownCantones();
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var cantonDropdown = document.getElementById("Canton");
        var selectedCanton = cantonDropdown.value;

        document.querySelector("form").addEventListener("submit", function () {
            var formAction = this.getAttribute("action");
            var updatedAction = formAction + "?SearchCanton=" + encodeURIComponent(selectedCanton);
            this.setAttribute("action", updatedAction);
        });
    });

    window.addEventListener('load', function () {
        var cantonDropdown = document.getElementById("Canton");
        var selectedCanton = getParameterByName("SearchCanton");

        if (selectedCanton) {
            cantonDropdown.value = selectedCanton;
        }
    });

    function getParameterByName(name, url) {
        if (!url) {
            url = window.location.href;
        }
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }
</script>

<table class="table" id="miTabla">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Record[0].Record.NameProduct)
            </th>
            <th class="precio" id="priceColumn">
                <a href="#" id="orderPrice">@Html.DisplayNameFor(model => model.Record[0].Record.Price)</a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Record[0].Record.NameStore)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Record[0].Store.NameProvince)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Record[0].Store.NameCanton)
            </th>
            <th class="date" id="dateColumn">
                <a href="#" id="orderDate">@Html.DisplayNameFor(model => model.Record[0].Record.RecordDate)</a>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var firstItem in Model.Record)
        {

            <tr>
                <td>
                    <div class="table-item">
                        <a class="election" asp-page="./Details" asp-route-NameGenerator="@firstItem.Record.NameGenerator" asp-route-RecordDate="@firstItem.Record.RecordDate.ToString("yyyy-MM-dd HH:mm:ss")">@Html.DisplayFor(modelItem => firstItem.Record.NameProduct)</a>
                    </div>
                </td>
                <td>
                    <div class="table-item precio">
                        ₡@Html.DisplayFor(modelItem => firstItem.Record.Price)
                    </div>
                </td>
                <td>
                    <div class="table-item">
                        @Html.DisplayFor(modelItem => firstItem.Record.NameStore)
                    </div>
                </td>
                <td>
                    <div class="table-item">
                        @Html.DisplayFor(modelItem => firstItem.Store.NameProvince)
                    </div>
                </td>
                <td>
                    <div class="table-item">
                        @Html.DisplayFor(modelItem => firstItem.Store.NameCanton)
                    </div>
                </td>
                <td>
                    <div class="table-item fecha">
                        @Html.DisplayFor(modelItem => firstItem.Record.RecordDate)
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<div id="pagination" class="pagination">
    <button id="previousPage" class="page-link">Anterior</button>
    <!-- Botones de paginación se generarán aquí -->
    <button id="nextPage" class="page-link">Siguiente</button>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var tabla = document.getElementById("miTabla");
        var tableBody = tabla.querySelector("tbody");
        var pagination = document.getElementById("pagination");
        var registrosPorPagina = 2;
        var ordenAscendentePrecio = true;
        var ordenAscendenteFecha = true;
        var filas = Array.from(tableBody.querySelectorAll("tr"));

        function mostrarFilas(pagina) {
            var inicio = (pagina - 1) * registrosPorPagina;
            var fin = pagina * registrosPorPagina;
            var paginatedRows = filas.slice(inicio, fin);

            tableBody.innerHTML = ""; // Limpiar el tbody

            paginatedRows.forEach(function (fila) {
                tableBody.appendChild(fila);
            });
        }

        function generarPaginacion(totalPaginas) {
            var html = '<button id="previousPage" class="page-link">Anterior</button>';
            for (var i = 1; i <= totalPaginas; i++) {
                if (i === currentPage) {
                    html += '<button class="page-link current-page" data-page="' + i + '">' + i + '</button>';
                } else {
                    html += '<button class="page-link" data-page="' + i + '">' + i + '</button>';
                }
            }
            html += '<button id="nextPage" class="page-link">Siguiente</button>';
            pagination.innerHTML = html;

            var pageButtons = pagination.querySelectorAll("button");
            pageButtons.forEach(function (button) {
                button.addEventListener("click", function () {
                    if (this.id === "previousPage") {
                        if (currentPage > 1) {
                            currentPage--;
                        }
                    } else if (this.id === "nextPage") {
                        if (currentPage < totalPaginas) {
                            currentPage++;
                        }
                    } else {
                        currentPage = parseInt(this.getAttribute("data-page"));
                    }

                    mostrarFilas(currentPage);

                    pageButtons.forEach(function (btn) {
                        btn.classList.remove("current-page");
                    });

                    // Agregar la clase "current-page" al botón de la página actual
                    pageButtons[currentPage].classList.add("current-page");
                });
            });

            pageButtons[currentPage].classList.add("current-page");
        }

        function ordenarPorPrecio() {
            filas.sort(function (a, b) {
                var precioA = parseFloat(a.querySelector(".precio").textContent.replace("₡", "").replace(",", ""));
                var precioB = parseFloat(b.querySelector(".precio").textContent.replace("₡", "").replace(",", ""));
                return ordenAscendentePrecio ? precioA - precioB : precioB - precioA;
            });

            mostrarFilas(currentPage);
            ordenAscendentePrecio = !ordenAscendentePrecio;
        }

        function ordenarPorFecha() {
            filas.sort(function (a, b) {
                var fechaStringA = a.querySelector(".fecha").textContent;
                var fechaStringB = b.querySelector(".fecha").textContent;
                var fechaA = parseFecha(fechaStringA);
                var fechaB = parseFecha(fechaStringB);
                return ordenAscendenteFecha ? fechaA - fechaB : fechaB - fechaA;
            });

            mostrarFilas(currentPage);
            ordenAscendenteFecha = !ordenAscendenteFecha;
        }

        function parseFecha(fechaString) {
            var parts = fechaString.split('/');
            var day = parseInt(parts[0], 10);
            var month = parseInt(parts[1] - 1, 10);
            var year = parseInt(parts[2], 10);
            return new Date(year, month, day);
        }

        var currentPage = 1;
        var totalRegistros = filas.length;
        var totalPaginas = Math.ceil(totalRegistros / registrosPorPagina);

        mostrarFilas(currentPage);
        generarPaginacion(totalPaginas);

        var enlaceOrdenarPrecio = document.getElementById("orderPrice");
        enlaceOrdenarPrecio.addEventListener("click", function (e) {
            e.preventDefault();
            ordenarPorPrecio();
        });

        var enlaceOrdenarFecha = document.getElementById("orderDate");
        enlaceOrdenarFecha.addEventListener("click", function (e) {
            e.preventDefault();
            ordenarPorFecha();
        });
    });
</script>

@* @{
    var prevDisabled = !Model.Records.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Records.HasNextPage ? "disabled" : "";
    var totalPages = Model.Records.TotalPages;
    var currentPage = Model.Records.PageIndex;
}

<div class="pagination justify-content-center">
    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @prevDisabled">
                <a class="page-link" asp-page="./Index"
                   asp-route-sortOrder="@Model.CurrentSort"
                   asp-route-pageIndex="@(Model.Records.PageIndex - 1)"
                   asp-route-SearchString="@Model.SearchString"
                   asp-route-SearchProvince="@Model.SearchProvince"
                   asp-route-SearchCanton="@Model.SearchCanton"
                   asp-route-SearchCategory="@Model.SearchCategory">
                    Anterior
                </a>
            </li>

            @if (currentPage > 3)
            {
                <li class="page-item ">
                    <a class="page-link" asp-page="./Index"
                       asp-route-pageIndex="1"
                       asp-route-sortOrder="@Model.CurrentSort"
                       asp-route-SearchString="@Model.SearchString"
                       asp-route-SearchProvince="@Model.SearchProvince"
                       asp-route-SearchCanton="@Model.SearchCanton"
                       asp-route-SearchCategory="@Model.SearchCategory">
                        1
                    </a>
                </li>
                <li class="page-item">
                    <span class="page-link">...</span>
                </li>
            }

            @for (int i = currentPage - 2; i <= currentPage + 2; i++)
            {
                if (i > 0 && i <= totalPages)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link" asp-page="./Index"
                           asp-route-pageIndex="@i"
                           asp-route-sortOrder="@Model.CurrentSort"
                           asp-route-SearchString="@Model.SearchString"
                           asp-route-SearchProvince="@Model.SearchProvince"
                           asp-route-SearchCanton="@Model.SearchCanton"
                           asp-route-SearchCategory="@Model.SearchCategory">
                            @i
                        </a>
                    </li>
                }
            }

            @if (currentPage < totalPages - 2)
            {
                <li class="page-item">
                    <span class="page-link">...</span>
                </li>
                <li class="page-item">
                    <a class="page-link" asp-page="./Index"
                       asp-route-pageIndex="@totalPages"
                       asp-route-sortOrder="@Model.CurrentSort"
                       asp-route-SearchString="@Model.SearchString"
                       asp-route-SearchProvince="@Model.SearchProvince"
                       asp-route-SearchCanton="@Model.SearchCanton"
                       asp-route-SearchCategory="@Model.SearchCategory">
                        @totalPages
                    </a>
                </li>
            }

            <li class="page-item @nextDisabled">
                <a class="page-link" asp-page="./Index"
                   asp-route-sortOrder="@Model.CurrentSort"
                   asp-route-pageIndex="@(Model.Records.PageIndex + 1)"
                   asp-route-SearchString="@Model.SearchString"
                   asp-route-SearchProvince="@Model.SearchProvince"
                   asp-route-SearchCanton="@Model.SearchCanton"
                   asp-route-SearchCategory="@Model.SearchCategory">
                    Siguiente
                </a>
            </li>
        </ul>
    </nav>
</div> *@





@* <div id="pagination" class="pagination">
    <button id="previousPage" class="page-link">Anterior</button>
    <!-- Botones de paginación se generarán aquí -->
    <button id="nextPage" class="page-link">Siguiente</button>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var tabla = document.getElementById("miTabla");
        var tableBody = tabla.querySelector("tbody");
        var pagination = document.getElementById("pagination");
        var registrosPorPagina = 2;
        var currentPage = 1;
        var ordenAscendentePrecio = true;
        var ordenAscendenteFecha = true;
        var filas = Array.from(tableBody.querySelectorAll("tr"));

        // Función para mostrar filas en la página actual
        function mostrarFilas() {
            var inicio = (currentPage - 1) * registrosPorPagina;
            var fin = currentPage * registrosPorPagina;
            var paginatedRows = filas.slice(inicio, fin);

            tableBody.innerHTML = ""; // Limpiar el tbody

            paginatedRows.forEach(function (fila) {
                tableBody.appendChild(fila);
            });
        }

        // Función para generar los controles de paginación
        function generarPaginacion() {
            var totalRegistros = filas.length;
            var totalPaginas = Math.ceil(totalRegistros / registrosPorPagina);

            var html = "";
            html += '<button id="previousPage" class="page-link">Anterior</button>';

            for (var i = 1; i <= totalPaginas; i++) {
                html += '<button class="page-link" data-page="' + i + '">' + i + '</button>';
            }

            html += '<button id="nextPage" class="page-link">Siguiente</button>';

            pagination.innerHTML = html;

            var pageButtons = pagination.querySelectorAll("button");

            pageButtons.forEach(function (button) {
                button.addEventListener("click", function () {
                    if (this.id === "previousPage") {
                        if (currentPage > 1) {
                            currentPage--;
                        }
                    } else if (this.id === "nextPage") {
                        if (currentPage < totalPaginas) {
                            currentPage++;
                        }
                    } else {
                        currentPage = parseInt(this.getAttribute("data-page"));
                    }

                    mostrarFilas();
                });
            });
        }

        // Función para ordenar las filas por precio
        function ordenarPorPrecio() {
            filas.sort(function (a, b) {
                var precioA = parseFloat(a.querySelector(".precio").textContent.replace("₡", "").replace(",", ""));
                var precioB = parseFloat(b.querySelector(".precio").textContent.replace("₡", "").replace(",", ""));
                return ordenAscendentePrecio ? precioA - precioB : precioB - precioA;
            });

            mostrarFilas();
            ordenAscendentePrecio = !ordenAscendentePrecio;
        }

    // Función para ordenar las filas por fecha
    function ordenarPorFecha() {
        filas.sort(function (a, b) {
            var fechaStringA = a.querySelector(".fecha").textContent;
            var fechaStringB = b.querySelector(".fecha").textContent;
            var fechaA = parseFecha(fechaStringA);
            var fechaB = parseFecha(fechaStringB);
            return ordenAscendenteFecha ? fechaA - fechaB : fechaB - fechaA;
        });

        mostrarFilas();
        ordenAscendenteFecha = !ordenAscendenteFecha;
    }

    // Función para parsear la fecha en formato "dd/MM/yyyy"
    function parseFecha(fechaString) {
        var parts = fechaString.split('/');
        var day = parseInt(parts[0], 10);
        var month = parseInt(parts[1] - 1, 10);
        var year = parseInt(parts[2], 10);
        return new Date(year, month, day);
    }

        // Inicializar la paginación y la tabla
        mostrarFilas();
        generarPaginacion();

        // Agregar eventos para ordenamiento por precio y fecha
        var enlaceOrdenarPrecio = document.getElementById("orderPrice");
        enlaceOrdenarPrecio.addEventListener("click", function (e) {
            e.preventDefault();
            ordenarPorPrecio();
        });

        var enlaceOrdenarFecha = document.getElementById("orderDate");
        enlaceOrdenarFecha.addEventListener("click", function (e) {
            e.preventDefault();
            ordenarPorFecha();
        });
    });
</script> *@