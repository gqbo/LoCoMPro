@page
@Html.AntiForgeryToken()
@model LoCoMPro_LV.Pages.Records.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<div class="container details-container">
    <div class="row d-flex justify-content-center align-items-center">
        <div class="card">
            <div class="bg">
                <div class="info_detail">
                    <div class="row">
                        <div class="col-4 details-image">
                        </div>
                        <div class="col-8">
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col-10">
                                    <h4>
                                        @Html.DisplayFor(model => model.Records.First().Record.NameProduct)
                                    </h4>
                                </div>
                                <div class="col-2 d-flex justify-content-end">
                                    <h4>
                                        ₡@Html.DisplayFor(model => model.Records.First().Record.Price)
                                    </h4>
                                </div>
                            </div>
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col">
                                    <h4>
                                        Usuario: @Html.DisplayFor(model => model.Records.First().Record.NameGenerator)
                                    </h4>
                                </div>
                            </div>
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col">
                                    <h7>
                                        Tienda: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                                        <br>
                                        Provincia: @Html.DisplayFor(model => model.Records.First().Store.NameProvince)
                                        <br>
                                        Cantón: @Html.DisplayFor(model => model.Records.First().Store.NameCanton)
                                    </h7>
                                </div>
                            </div>
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col">
                                    <h7>
                                        Descripción: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tincidunt sapien eu turpis sodales, sed bibendum elit euismod. Nunc vel ipsum id leo luctus fringilla. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae.
                                    </h7>
                                </div>
                            </div>
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col d-flex justify-content-end">
                                    <h7>
                                        @Html.DisplayFor(model => model.Records.First().Record.RecordDate)
                                    </h7>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="blob"></div>
        </div>
    </div>
    <div class="row">
        <table class="table-details table" id="miTabla">
            <thead>
                <tr>
                    <th>
                        <a class="a-ordering" id="orderDate">@Html.DisplayNameFor(model => model.Records[0].Record.RecordDate)</a>
                        <span class="arrow" id="dateArrow"></span>
                    </th>
                    <th>
                        <div class="table-item precio" id="priceColumn">
                            <a class="a-ordering" id="orderPrice">@Html.DisplayNameFor(model => model.Records[0].Record.Price)</a>
                            <span class="arrow" id="priceArrow"></span>
                        </div>
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Records[0].Record.NameGenerator)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Records[0].Record.Description)
                    </th>
                    <th>
                        Valoración
                    </th>
                    <th class="report">
                        
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var firstItem in Model.Records)
                {
                    <tr>
                        <td>
                            <div class="table-item fecha">
                                @Html.DisplayFor(modelItem => firstItem.Record.RecordDate)
                            </div>
                        </td>
                        <td>
                            <div class="table-item precio">
                                ₡@Html.DisplayFor(modelItem => firstItem.Record.Price)
                            </div>
                        </td>
                        <td>
                            <div class="table-item">
                                @Html.DisplayFor(modelItem => firstItem.Record.NameGenerator)
                            </div>
                        </td>
                        <td>
                            <div class="table-item">
                                @Html.DisplayFor(modelItem => firstItem.Record.Description)
                            </div>
                        </td>
                        <td>
                            <div class="ratings-wrapper">
                                <div class="ratings">
                                    @for (var starNumber = 5; starNumber >= 1; starNumber--)
                                    {
                                        <span data-rating="@starNumber" data-nameGenerator="@firstItem.Record.NameGenerator" data-RecordDate="@firstItem.Record.RecordDate"
                                        @(starNumber <= firstItem.AverageRating ? "data-clicked" : "")>
                                            <span>★</span>
                                        </span>
                                    }
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="table-item report">
                                <a class="election" asp-page="../Reports/Create" asp-route-NameGenerator="@firstItem.Record.NameGenerator" asp-route-RecordDate="@firstItem.Record.RecordDate.ToString("yyyy-MM-dd HH:mm:ss")"><img src="~/Images/report.png"></a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    </div>
    <div>
        <a href="javascript:history.go(-1);">Volver</a>
    </div>
</div>

<div id="pagination" class="pagination">
    <button id="previousPage" class="page-link">Anterior</button>
    <button id="nextPage" class="page-link">Siguiente</button>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    const ratingsWrappers = document.querySelectorAll('.ratings-wrapper');

    function manageStarRatings() {
        ratingsWrappers.forEach(ratingsWrapper => {
            const stars = ratingsWrapper.querySelectorAll('.ratings span');
            const isAuthenticated = '@User.Identity.IsAuthenticated';

            stars.forEach(star => {
                star.addEventListener('click', () => {

                    if (isAuthenticated == "True") {

                        var rating = star.getAttribute('data-rating');
                        var nameGenerator = star.getAttribute('data-nameGenerator');
                        var recordDate = star.getAttribute('data-RecordDate');

                        updateStarColors(stars, rating);
                        sendPost(rating, nameGenerator, recordDate);
                    } else {
                        window.location.href = '../Identity/Account/Login';
                    }
                });
            });
        });
    }


    function updateStarColors(stars, rating) {
        stars.forEach(star => {
            const starRating = parseInt(star.getAttribute('data-rating'));
            if (starRating <= rating) {
                star.setAttribute('data-clicked', '');
            } else {
                star.removeAttribute('data-clicked');
            }
        });
    }

    function logData(ratingsWrapper, rating) {
        const recordId = ratingsWrapper.getAttribute('data-record-id');
        const [nameGenerator, recordDate] = recordId.split('-');
        var userName = '@User.Identity.Name';
        console.log(`Estrellas: ${rating}`);
        console.log(`Usuario autor: ${nameGenerator}`);
        console.log(`Fecha: ${recordDate}`);
        console.log(`Usuario calificador: ${userName}`);
    }

    function sendPost(rating, nameGenerator, recordDate) {
        $.ajax({
            type: 'POST',
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            url: '/Records/Details?handler=SubmitRating',
            data: { rating: rating, nameGenerator: nameGenerator, recordDate: recordDate },
            success: function (data) {
            },
            error: function (error) {
            }
        });
    }

    manageStarRatings();

</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var tabla = document.getElementById("miTabla");
        var tableBody = tabla.querySelector("tbody");
        var pagination = document.getElementById("pagination");
        var registrosPorPagina = 10;
        var currentPage = 1;
        var sortOrderPrice = "asc";
        var sortOrderDate = "desc";
        var currentSortColumn = null;

        // Esta función se encarga de mostrar las filas de la tabla que deben estar visibles en la página actual.
        // Filtra las filas según la página actual y oculta las demás.
        function mostrarFilas() {
            var filas = tableBody.querySelectorAll("tr");
            var inicio = (currentPage - 1) * registrosPorPagina;
            var fin = currentPage * registrosPorPagina;

            filas.forEach(function (fila, index) {
                if (index >= inicio && index < fin) {
                    fila.style.display = "table-row";
                } else {
                    fila.style.display = "none";
                }
            });
        }

        // Esta función se encarga de ordenar la tabla por el precio de los productos en orden ascendente o descendente.
        // Utiliza el valor de sortOrderPrice para determinar el orden y actualiza la tabla en consecuencia.
        function ordenarTablaPorPrecio() {
            var filas = Array.from(tableBody.querySelectorAll("tr"));

            filas.sort(function (a, b) {
                var valueA = a.querySelector(".precio").textContent.replace("₡", "").trim();
                var valueB = b.querySelector(".precio").textContent.replace("₡", "").trim();

                if (sortOrderPrice === "asc") {
                    return parseFloat(valueA) - parseFloat(valueB);
                } else {
                    return parseFloat(valueB) - parseFloat(valueA);
                }
            });

            filas.forEach(function (fila) {
                tableBody.removeChild(fila);
            });

            filas.forEach(function (fila) {
                tableBody.appendChild(fila);
            });
        }

        // Esta función se encarga de ordenar la tabla por la fecha de los registros en orden ascendente o descendente.
        // Utiliza el valor de sortOrderDate para determinar el orden y actualiza la tabla en consecuencia.
        function ordenarTablaPorFecha() {
            var filas = Array.from(tableBody.querySelectorAll("tr"));

            filas.sort(function (a, b) {
                var dateA = new Date(a.querySelector(".fecha").textContent.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$2/$1/$3'));
                var dateB = new Date(b.querySelector(".fecha").textContent.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$2/$1/$3'));

                if (sortOrderDate === "asc") {
                    return dateA - dateB;
                } else {
                    return dateB - dateA;
                }
            });

            filas.forEach(function (fila) {
                tableBody.removeChild(fila);
            });

            filas.forEach(function (fila) {
                tableBody.appendChild(fila);
            });
        }

        // Genera la paginación en la parte inferior de la tabla. Calcula el número de páginas y muestra los botones de
        // navegación para ir a páginas anteriores y siguientes. Además, muestra un número limitado de botones de página alrededor de la página actual.
        function generarPaginacion() {
            var filas = tableBody.querySelectorAll("tr");
            var totalRegistros = filas.length;
            var totalPaginas = Math.ceil(totalRegistros / registrosPorPagina);
            var paginaCercana = 2;

            var html = "";

            var inicioPaginacion = Math.max(1, currentPage - paginaCercana);
            var finPaginacion = Math.min(totalPaginas, currentPage + paginaCercana);

            if (currentPage > 1) {
                html += '<button class="page-link" data-page="' + (currentPage - 1) + '">Anterior</button>';
            }

            if (currentPage > (paginaCercana + 1)) {
                html += '<button class="page-link" data-page="1">1</button>';
                if (currentPage > (paginaCercana + 2)) {
                    html += '<span class="page-link">...</span>';
                }
            }

            for (var i = inicioPaginacion; i <= finPaginacion; i++) {
                var isCurrentPage = i === currentPage ? 'current-page' : '';
                html += '<button class="page-link ' + isCurrentPage + '" data-page="' + i + '">' + i + '</button>';
            }

            if (currentPage < (totalPaginas - paginaCercana)) {
                if (currentPage < (totalPaginas - paginaCercana - 1)) {
                    html += '<span class="page-link">...</span>';
                }
                html += '<button class="page-link" data-page="' + totalPaginas + '">' + totalPaginas + '</button>';
            }

            if (currentPage < totalPaginas) {
                html += '<button class="page-link" data-page="' + (currentPage + 1) + '">Siguiente</button>';
            }

            pagination.innerHTML = html;

            var pageButtons = pagination.querySelectorAll("button");

            pageButtons.forEach(function (button) {
                button.addEventListener("click", function () {
                    currentPage = parseInt(this.getAttribute("data-page"));
                    if (currentSortColumn === "precio") {
                        ordenarTablaPorPrecio();
                    } else if (currentSortColumn === "fecha") {
                        ordenarTablaPorFecha();
                    }
                    mostrarFilas();
                    generarPaginacion();
                });
            });
        }

        var orderPriceLink = document.getElementById("orderPrice");
        orderPriceLink.addEventListener("click", function () {
            if (sortOrderPrice === "asc") {
                sortOrderPrice = "desc";
                document.getElementById("priceArrow").innerHTML = " &#129095;";
                document.getElementById("dateArrow").innerHTML = "";
            } else {
                sortOrderPrice = "asc";
                document.getElementById("priceArrow").innerHTML = "&#129093;";
                document.getElementById("dateArrow").innerHTML = "";
            }
            currentSortColumn = "price";
            ordenarTablaPorPrecio();
            mostrarFilas();
            generarPaginacion();
        });

        var orderDateLink = document.getElementById("orderDate");
        orderDateLink.addEventListener("click", function () {
            if (sortOrderDate === "asc") {
                sortOrderDate = "desc";
                document.getElementById("dateArrow").innerHTML = " &#129095;";
                document.getElementById("priceArrow").innerHTML = "";
            } else {
                sortOrderDate = "asc";
                document.getElementById("dateArrow").innerHTML = " &#129093;";
                document.getElementById("priceArrow").innerHTML = "";
            }
            currentSortColumn = "date";
            ordenarTablaPorFecha();
            mostrarFilas();
            generarPaginacion();
        });

        mostrarFilas();
        generarPaginacion();
    });
</script>

