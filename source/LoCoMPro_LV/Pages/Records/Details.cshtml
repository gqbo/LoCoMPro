@page
@Html.AntiForgeryToken()
@model LoCoMPro_LV.Pages.Records.DetailsModel

@{
    ViewData["Title"] = "Details";
}


<div class="container details-container">
    <div class="row d-flex justify-content-center align-items-center">
        <div class="card">
            <div class="bg">
                <div class="info_detail">
                    <div class="row">
                        <div class="col-4 details-image d-flex align-items-center justify-content-center">
                            <div id="imageCarousel" class="carousel carousel-dark slide" data-ride="carousel">
                                <div class="carousel-inner">
                                    @{  var contador = 0; }
                                    @foreach (var record in Model.Records)
                                    {
                                        foreach (var (image, index) in record.Images.Select((value, i) => (value, i)))
                                        {                                          
                                            <div class="carousel-item @(index == 0 && record == Model.Records.First() ? "active" : "")">
                                                <img src="data:image/jpeg;base64,@Convert.ToBase64String(image.DataImage)" alt="@image.NameImage" class="d-block w-100" style=max-width: 100%; max-height: 100%;">
                                            </div>
                                            contador++;
                                        }
                                    }
                                    @if (contador == 0)
                                    {
                                        <div class="sinImagen">
                                            <img src="~/Images/NoImage.jpg">
                                        </div>
                                    }
                                </div>
                                <button class="carousel-control-prev" type="button" data-bs-target="#imageCarousel" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#imageCarousel" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>                                
                            </div>
                        </div>
                        <div class="col-8">
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col-10">
                                    <h4>
                                        @Html.DisplayFor(model => model.Records.First().Record.NameProduct)
                                    </h4>
                                </div>
                                <div class="col-2 d-flex justify-content-end">
                                    <h4>
                                        ₡@Html.DisplayFor(model => model.Records.First().Record.Price)
                                    </h4>
                                </div>
                            </div>
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col">
                                    <h4>
                                        Usuario: @Html.DisplayFor(model => model.Records.First().Record.NameGenerator)
                                    </h4>
                                </div>
                            </div>
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col">
                                    <h7>
                                        Tienda: @Html.DisplayFor(model => model.Records.First().Store.NameStore)
                                        <br>
                                        Provincia: @Html.DisplayFor(model => model.Records.First().Store.NameProvince)
                                        <br>
                                        Cantón: @Html.DisplayFor(model => model.Records.First().Store.NameCanton)
                                    </h7>
                                </div>
                            </div>
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col">
                                    <h7>
                                        Descripción: @Html.DisplayFor(model => model.Records.First().Record.Description)
                                    </h7>
                                </div>
                            </div>
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col d-flex justify-content-end">
                                    <h7>
                                        @Html.DisplayFor(model => model.Records.First().Record.RecordDate)
                                    </h7>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="blob"></div>
        </div>
    </div>
    @if (User.Identity.IsAuthenticated)
    {
        <form method="post" asp-page-handler="ManageList" class="ml-auto">
            <div class="row d-flex justify-content-end align-items-center details-container">
                <input type="hidden" id="nameProduct" value="@Model.Records.First().Record.NameProduct" name="NameProduct" asp-for="NameProduct">
                <input type="hidden" id="nameGenerator" name="NameGenerator" asp-for="NameGenerator">
                <input type="hidden" id="recordDate" name="RecordDate" asp-for="RecordDate">

                @if (Model.InList == 1)
                {
                    <button type="submit" class="button_quit button">
                        <input type="hidden" id="InList" value="4" name="InList" asp-for="InList">
                        <span class="button__text">Quitar de la lista</span>
                        <span class="button__icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" viewBox="0 0 24 24" stroke-width="2" stroke-linejoin="round" stroke-linecap="round" stroke="currentColor" height="24" fill="none" class="svg"><line y2="12" y1="12" x2="19" x1="5"></line></svg></span>
                    </button>
                }
                else
                {
                    <button type="submit" class="button">
                        <input type="hidden" id="InList" value="3" name="InList" asp-for="InList">
                        <span class="button__text">Agregar a lista</span>
                        <span class="button__icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" viewBox="0 0 24 24" stroke-width="2" stroke-linejoin="round" stroke-linecap="round" stroke="currentColor" height="24" fill="none" class="svg"><line y2="19" y1="5" x2="12" x1="12"></line><line y2="12" y1="12" x2="19" x1="5"></line></svg></span>
                    </button>
                }
            </div>
        </form>
    }
    <div class="row">
        <table class="table-details table" id="miTabla">
            <thead>
                <tr>
                    <th>
                        <a class="a-ordering" id="orderDate">@Html.DisplayNameFor(model => model.Records[0].Record.RecordDate)</a>
                        <span class="arrow" id="dateArrow"></span>
                    </th>
                    <th>
                        <div class="table-item precio" id="priceColumn">
                            <a class="a-ordering" id="orderPrice">@Html.DisplayNameFor(model => model.Records[0].Record.Price)</a>
                            <span class="arrow" id="priceArrow"></span>
                        </div>
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Records[0].Record.NameGenerator)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Records[0].Record.Description)
                    </th>
                    <th>
                        Valoración
                    </th>
                    <th class="report">

                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var firstItem in Model.Records)
                {
                    <tr>
                        <td>
                            <div class="table-item fecha">
                                <button class="btn-toggle-images" data-toggle="collapse" data-target="#imagesCollapse@(firstItem.Record.RecordDate.ToString("yyyy-MM-dd-HH-mm-ss"))">@Html.DisplayFor(modelItem => firstItem.Record.RecordDate)</button>
                                <div id="imagesCollapse@(firstItem.Record.RecordDate.ToString("yyyy-MM-dd-HH-mm-ss"))" class="collapse images-container">
                                    @foreach (var image in firstItem.Images)
                                    {
                                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(image.DataImage)" alt="@image.NameImage" class="d-block w-100" style="max-width: 100%; max-height: 100%;">
                                    }
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="table-item precio">
                                ₡@Html.DisplayFor(modelItem => firstItem.Record.Price)
                            </div>
                        </td>
                        <td>
                            <div class="table-item">
                                @Html.DisplayFor(modelItem => firstItem.Record.NameGenerator)
                            </div>
                        </td>
                        <td>
                            <div class="table-item">
                                @Html.DisplayFor(modelItem => firstItem.Record.Description)
                            </div>
                        </td>
                        <td>
                            <div class="ratings-container">
                                <div class="ratings-wrapper">
                                    <div class="ratings">
                                        @for (var starNumber = 5; starNumber >= 1; starNumber--)
                                        {
                                            <span data-rating="@starNumber" data-nameGenerator="@firstItem.Record.NameGenerator" data-RecordDate="@firstItem.Record.RecordDate"
                                            @(starNumber <= firstItem.AverageRating ? "data-clicked" : "")>
                                                <span>★</span>
                                            </span>
                                        }
                                    </div>
                                </div>
                                <div class="count-rating" data-id="@firstItem.Record.NameGenerator-@firstItem.Record.RecordDate">
                                    ( @Html.DisplayFor(modelItem => firstItem.CountRating) )
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="table-item report">
                                <a class="election" asp-page="../Reports/Create" asp-route-NameGenerator="@firstItem.Record.NameGenerator" asp-route-RecordDate="@firstItem.Record.RecordDate.ToString("yyyy-MM-dd HH:mm:ss")"><img src="~/Images/report.png"></a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div id="pagination" class="pagination">
    <button id="previousPage" class="page-link">Anterior</button>
    <button id="nextPage" class="page-link">Siguiente</button>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    const ratingsWrappers = document.querySelectorAll('.ratings-wrapper');

    function manageStarRatings() {
        ratingsWrappers.forEach(ratingsWrapper => {
            const stars = ratingsWrapper.querySelectorAll('.ratings span');
            const isAuthenticated = '@User.Identity.IsAuthenticated';

            stars.forEach(star => {
                star.addEventListener('click', () => {
                    if (isAuthenticated == "True") {

                        var rating = star.getAttribute('data-rating');
                        var nameGenerator = star.getAttribute('data-nameGenerator');
                        var recordDate = star.getAttribute('data-RecordDate');

                        updateStarColors(stars, rating);
                        sendPostRating(rating, nameGenerator, recordDate);

                    } else {
                        window.location.href = '../Identity/Account/Login';
                        return false;
                    }
                });
            });
        });
    }


    function updateStarColors(stars, rating) {
        stars.forEach(star => {
            const starRating = parseInt(star.getAttribute('data-rating'));
            if (starRating <= rating) {
                star.setAttribute('data-clicked', '');
            } else {
                star.removeAttribute('data-clicked');
            }
        });
    }

    function logData(ratingsWrapper, rating) {
        const recordId = ratingsWrapper.getAttribute('data-record-id');
        const [nameGenerator, recordDate] = recordId.split('-');
        var userName = '@User.Identity.Name';
        console.log(`Estrellas: ${rating}`);
        console.log(`Usuario autor: ${nameGenerator}`);
        console.log(`Fecha: ${recordDate}`);
        console.log(`Usuario calificador: ${userName}`);
    }

    function sendPostRating(rating, nameGenerator, recordDate) {
        $.ajax({
            type: 'POST',
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            url: '/Records/Details?handler=SubmitRating',
            data: { rating: rating, nameGenerator: nameGenerator, recordDate: recordDate },
            success: function (result) {
                console.log("SI SIRVIO EL POST para el promedio de la valoración");
                var elementId = nameGenerator + "-" + recordDate;
                $(".count-rating[data-id='" + elementId + "']").text("( " + result.countRating + " )");
            },
            error: function () {
            }
        });
    }
    manageStarRatings();

</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var tabla = document.getElementById("miTabla");
        var tableBody = tabla.querySelector("tbody");
        var pagination = document.getElementById("pagination");
        var registrosPorPagina = 10;
        var currentPage = 1;
        var sortOrderPrice = "asc";
        var sortOrderDate = "desc";
        var currentSortColumn = null;

        // Esta función se encarga de mostrar las filas de la tabla que deben estar visibles en la página actual.
        // Filtra las filas según la página actual y oculta las demás.
        function mostrarFilas() {
            var filas = tableBody.querySelectorAll("tr");
            var inicio = (currentPage - 1) * registrosPorPagina;
            var fin = currentPage * registrosPorPagina;

            filas.forEach(function (fila, index) {
                if (index >= inicio && index < fin) {
                    fila.style.display = "table-row";
                } else {
                    fila.style.display = "none";
                }
            });
        }

        // Esta función se encarga de ordenar la tabla por el precio de los productos en orden ascendente o descendente.
        // Utiliza el valor de sortOrderPrice para determinar el orden y actualiza la tabla en consecuencia.
        function ordenarTablaPorPrecio() {
            var filas = Array.from(tableBody.querySelectorAll("tr"));

            filas.sort(function (a, b) {
                var valueA = a.querySelector(".precio").textContent.replace("₡", "").trim();
                var valueB = b.querySelector(".precio").textContent.replace("₡", "").trim();

                if (sortOrderPrice === "asc") {
                    return parseFloat(valueA) - parseFloat(valueB);
                } else {
                    return parseFloat(valueB) - parseFloat(valueA);
                }
            });

            filas.forEach(function (fila) {
                tableBody.removeChild(fila);
            });

            filas.forEach(function (fila) {
                tableBody.appendChild(fila);
            });
        }

        // Esta función se encarga de ordenar la tabla por la fecha de los registros en orden ascendente o descendente.
        // Utiliza el valor de sortOrderDate para determinar el orden y actualiza la tabla en consecuencia.
        function ordenarTablaPorFecha() {
            var filas = Array.from(tableBody.querySelectorAll("tr"));

            filas.sort(function (a, b) {
                var dateA = new Date(a.querySelector(".fecha").textContent.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$2/$1/$3'));
                var dateB = new Date(b.querySelector(".fecha").textContent.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$2/$1/$3'));

                if (sortOrderDate === "asc") {
                    return dateA - dateB;
                } else {
                    return dateB - dateA;
                }
            });

            filas.forEach(function (fila) {
                tableBody.removeChild(fila);
            });

            filas.forEach(function (fila) {
                tableBody.appendChild(fila);
            });
        }

        // Genera la paginación en la parte inferior de la tabla. Calcula el número de páginas y muestra los botones de
        // navegación para ir a páginas anteriores y siguientes. Además, muestra un número limitado de botones de página alrededor de la página actual.
        function generarPaginacion() {
            var filas = tableBody.querySelectorAll("tr");
            var totalRegistros = filas.length;
            var totalPaginas = Math.ceil(totalRegistros / registrosPorPagina);
            var paginaCercana = 2;

            var html = "";

            var inicioPaginacion = Math.max(1, currentPage - paginaCercana);
            var finPaginacion = Math.min(totalPaginas, currentPage + paginaCercana);

            if (currentPage > 1) {
                html += '<button class="page-link" data-page="' + (currentPage - 1) + '">Anterior</button>';
            }

            if (currentPage > (paginaCercana + 1)) {
                html += '<button class="page-link" data-page="1">1</button>';
                if (currentPage > (paginaCercana + 2)) {
                    html += '<span class="page-link">...</span>';
                }
            }

            for (var i = inicioPaginacion; i <= finPaginacion; i++) {
                var isCurrentPage = i === currentPage ? 'current-page' : '';
                html += '<button class="page-link ' + isCurrentPage + '" data-page="' + i + '">' + i + '</button>';
            }

            if (currentPage < (totalPaginas - paginaCercana)) {
                if (currentPage < (totalPaginas - paginaCercana - 1)) {
                    html += '<span class="page-link">...</span>';
                }
                html += '<button class="page-link" data-page="' + totalPaginas + '">' + totalPaginas + '</button>';
            }

            if (currentPage < totalPaginas) {
                html += '<button class="page-link" data-page="' + (currentPage + 1) + '">Siguiente</button>';
            }

            pagination.innerHTML = html;

            var pageButtons = pagination.querySelectorAll("button");

            pageButtons.forEach(function (button) {
                button.addEventListener("click", function () {
                    currentPage = parseInt(this.getAttribute("data-page"));
                    if (currentSortColumn === "precio") {
                        ordenarTablaPorPrecio();
                    } else if (currentSortColumn === "fecha") {
                        ordenarTablaPorFecha();
                    }
                    mostrarFilas();
                    generarPaginacion();
                });
            });
        }

        var orderPriceLink = document.getElementById("orderPrice");
        orderPriceLink.addEventListener("click", function () {
            if (sortOrderPrice === "asc") {
                sortOrderPrice = "desc";
                document.getElementById("priceArrow").innerHTML = " &#129095;";
                document.getElementById("dateArrow").innerHTML = "";
            } else {
                sortOrderPrice = "asc";
                document.getElementById("priceArrow").innerHTML = "&#129093;";
                document.getElementById("dateArrow").innerHTML = "";
            }
            currentSortColumn = "price";
            ordenarTablaPorPrecio();
            mostrarFilas();
            generarPaginacion();
        });

        var orderDateLink = document.getElementById("orderDate");
        orderDateLink.addEventListener("click", function () {
            if (sortOrderDate === "asc") {
                sortOrderDate = "desc";
                document.getElementById("dateArrow").innerHTML = " &#129095;";
                document.getElementById("priceArrow").innerHTML = "";
            } else {
                sortOrderDate = "asc";
                document.getElementById("dateArrow").innerHTML = " &#129093;";
                document.getElementById("priceArrow").innerHTML = "";
            }
            currentSortColumn = "date";
            ordenarTablaPorFecha();
            mostrarFilas();
            generarPaginacion();
        });

        mostrarFilas();
        generarPaginacion();
    });

    $(document).ready(function () {
        $(".btn-toggle-images").click(function () {
            var targetId = $(this).data("target");
            $("#" + targetId).toggleClass("show");
        });
    });
</script>

<style>
    .carousel-control-prev,
    .carousel-control-next {
        border-width: 6px; /* Puedes ajustar el valor según tu preferencia */
    }

    .images-container {
        display: flex;
    }

    .images-container img {
        margin-right: 10px; /* Puedes ajustar el margen según tus preferencias */
    }

    .details-image {
        border: 2px solid #ddd; /* Color del marco */
        padding: 10px; /* Espacio interno del marco */
        border-radius: 10px; /* Bordes redondeados del marco */
    }

    .details-image img {
        border: 1px solid #ddd; /* Color del borde de la imagen dentro del marco */
        border-radius: 8px; /* Bordes redondeados de la imagen */
    }

    #imageCarousel {
        max-width: 300px; /* Establece el ancho máximo según tus necesidades */
        max-height: 300px; /* Establece la altura máxima según tus necesidades */
        margin: 0 auto; /* Centra horizontalmente */
    }

    .carousel-item img {
        width: 250px; /* Establece el ancho fijo */
        height: 250px; /* Establece la altura fija */
        object-fit: cover; /* Ajusta la imagen para cubrir completamente la caja sin distorsionar */
        margin: 0 auto;
    }

    .sinImagen img{
        width: 250px; /* Establece el ancho fijo */
        height: 250px; /* Establece la altura fija */
        object-fit: cover; /* Ajusta la imagen para cubrir completamente la caja sin distorsionar */
        margin: 0 auto;
    }

</style>

<!-- Bootstrap CSS -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

<!-- Tu contenido -->
<!-- Bootstrap JS y dependencias (Popper.js y jQuery) -->
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>