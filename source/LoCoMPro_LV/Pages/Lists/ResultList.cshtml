@page
@model LoCoMPro_LV.Pages.Lists.ResultListModel

@{
    ViewData["Title"] = "ResultList";
}

<div class="container details-container">
    <div class="row d-flex justify-content-center align-items-center">
        <div class="list_result card">
            <div class="list_result_bg bg">
                <div class="info_detail">
                    <div class="row">
                        <div class="col-6">
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col-12">
                                    <h2>
                                        @Html.DisplayFor(model => model.Result.Store.NameStore)
                                    </h2>
                                </div>
                            </div>
                            <br>
                            <div class="row d-flex justify-content-between align-items-center">
                                <div class="col">
                                    <h5>
                                        Cantón: @Html.DisplayFor(model => model.Result.Store.NameCanton)
                                        <br>
                                        Provincia: @Html.DisplayFor(model => model.Result.Store.NameProvince)
                                        <br>
                                        <br>
                                        Precio total: ₡@Html.DisplayFor(model => model.Result.totalPrice)
                                        <br>
                                        Distancia: @(Model.Result.Distance != 0 ? string.Format("{0:0.0} km", Model.Result.Distance) : "N/A")
                                    </h5>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="col-12 d-flex justify-content-center">
                                <div class="map-list" id="map"></div>
                                <div id="marker-info" class="marker-info">
                                    <input type="number" display="none" step="0.0001" lang="en" id="latitude" asp-for="@Model.Result.Store.Latitude" />
                                    <input type="number" display="none" step="0.0001" lang="en" id="longitude" asp-for="@Model.Result.Store.Longitude" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="blob"></div>
        </div>
    </div>

    <table class="table_listProduct table table-striped" id="miTabla">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Result.Records[0].NameProduct)
                </th>
                <th id="priceColumn">
                    <div class="precio_listed">
                        <a class="a-ordering" id="orderPrice">@Html.DisplayNameFor(model => model.Result.Records[0].Price)</a>
                        <span class="arrow" id="priceArrow"></span>
                    </div>
                </th>
                <th class="date" id="dateColumn">
                    <a class="a-ordering" id="orderDate">@Html.DisplayNameFor(model => model.Result.Records[0].RecordDate)</a>
                    <span class="arrow" id="dateArrow"></span>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var firstItem in Model.Result.Records)
            {

                <tr>
                    <td>
                        <div class="table-item">
                            <a class="election" asp-page="../Records/Details" asp-route-NameGenerator="@firstItem.NameGenerator" asp-route-RecordDate="@firstItem.RecordDate.ToString("yyyy-MM-dd HH:mm:ss")">@Html.DisplayFor(modelItem => firstItem.NameProduct)</a>
                        </div>
                    </td>
                    <td>
                        <div class="table-item precio_listed">
                            ₡@Html.DisplayFor(modelItem => firstItem.Price)
                        </div>
                    </td>
                    <td class="table-item fecha">
                        <div>
                            @Html.DisplayFor(modelItem => firstItem.RecordDate)
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div id="pagination" class="pagination">
    <button id="previousPage" class="page-link">Anterior</button>
    <button id="nextPage" class="page-link">Siguiente</button>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://unpkg.com/leaflet@1.0.2/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.2/dist/leaflet.css" />

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var initialLatitude = @Html.Raw(Json.Serialize(@Model.Result.Store.Latitude));
            var initialLongitude = @Html.Raw(Json.Serialize(@Model.Result.Store.Longitude));



            var map = L.map('map', {
                minZoom: 8,
                maxZoom: 17,
                dragging: true
            }).setView([initialLatitude, initialLongitude], 12);


            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 18
            }).addTo(map);

            var costaRicaBounds = L.latLngBounds(L.latLng(8.032, -85.950), L.latLng(11.217, -82.555));
            map.setMaxBounds(costaRicaBounds);

            map.on('drag', function () {
                if (!costaRicaBounds.contains(map.getBounds())) {
                    map.panInsideBounds(costaRicaBounds, { animate: true });
                }
            });

            var marker = L.marker([initialLatitude, initialLongitude], { draggable: false }).addTo(map);

            marker.on('dragend', function (e) {
                var latlng = e.target.getLatLng();
                updateLocationInfo(latlng.lat, latlng.lng);
            });


        });
    </script>

    <script>
    document.addEventListener("DOMContentLoaded", function () {
        var tabla = document.getElementById("miTabla");
        var tableBody = tabla.querySelector("tbody");
        var pagination = document.getElementById("pagination");
        var registrosPorPagina = 10;
        var currentPage = 1;
        var sortOrderPrice = "asc";
        var sortOrderDate = "desc";
        var currentSortColumn = null;

        // Esta función se encarga de mostrar las filas de la tabla que deben estar visibles en la página actual.
        // Filtra las filas según la página actual y oculta las demás.
        function mostrarFilas() {
            var filas = tableBody.querySelectorAll("tr");
            var inicio = (currentPage - 1) * registrosPorPagina;
            var fin = currentPage * registrosPorPagina;

            filas.forEach(function (fila, index) {
                if (index >= inicio && index < fin) {
                    fila.style.display = "table-row";
                } else {
                    fila.style.display = "none";
                }
            });
        }

        // Esta función se encarga de ordenar la tabla por el precio de los productos en orden ascendente o descendente.
        // Utiliza el valor de sortOrderPrice para determinar el orden y actualiza la tabla en consecuencia.
         function ordenarTablaPorPrecio() {
            var filas = Array.from(tableBody.querySelectorAll("tr"));

            filas.sort(function (a, b) {
                var valueA = a.querySelector(".precio_listed").textContent.replace("₡", "").replace(/[.,]/g, "").trim();
                var valueB = b.querySelector(".precio_listed").textContent.replace("₡", "").replace(/[.,]/g, "").trim();

                if (sortOrderPrice === "asc") {
                    return parseFloat(valueA) - parseFloat(valueB);
                } else {
                    return parseFloat(valueB) - parseFloat(valueA);
                }
            });

            filas.forEach(function (fila) {
                tableBody.removeChild(fila);
            });

            filas.forEach(function (fila) {
                tableBody.appendChild(fila);
            });
        }

        // Esta función se encarga de ordenar la tabla por la fecha de los registros en orden ascendente o descendente.
        // Utiliza el valor de sortOrderDate para determinar el orden y actualiza la tabla en consecuencia.
        function ordenarTablaPorFecha() {
            var filas = Array.from(tableBody.querySelectorAll("tr"));

            filas.sort(function (a, b) {
                var dateA = new Date(a.querySelector(".fecha").textContent.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$2/$1/$3'));
                var dateB = new Date(b.querySelector(".fecha").textContent.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$2/$1/$3'));

                if (sortOrderDate === "asc") {
                    return dateA - dateB;
                } else {
                    return dateB - dateA;
                }
            });

            filas.forEach(function (fila) {
                tableBody.removeChild(fila);
            });

            filas.forEach(function (fila) {
                tableBody.appendChild(fila);
            });
        }

        // Genera la paginación en la parte inferior de la tabla. Calcula el número de páginas y muestra los botones de
        // navegación para ir a páginas anteriores y siguientes. Además, muestra un número limitado de botones de página alrededor de la página actual.
        function generarPaginacion() {
            var filas = tableBody.querySelectorAll("tr");
            var totalRegistros = filas.length;
            var totalPaginas = Math.ceil(totalRegistros / registrosPorPagina);
            var paginaCercana = 2;

            var html = "";

            var inicioPaginacion = Math.max(1, currentPage - paginaCercana);
            var finPaginacion = Math.min(totalPaginas, currentPage + paginaCercana);

            if (currentPage > 1) {
                html += '<button class="page-link" data-page="' + (currentPage - 1) + '">Anterior</button>';
            }

            if (currentPage > (paginaCercana + 1)) {
                html += '<button class="page-link" data-page="1">1</button>';
                if (currentPage > (paginaCercana + 2)) {
                    html += '<span class="page-link">...</span>';
                }
            }

            for (var i = inicioPaginacion; i <= finPaginacion; i++) {
                var isCurrentPage = i === currentPage ? 'current-page' : '';
                html += '<button class="page-link ' + isCurrentPage + '" data-page="' + i + '">' + i + '</button>';
            }

            if (currentPage < (totalPaginas - paginaCercana)) {
                if (currentPage < (totalPaginas - paginaCercana - 1)) {
                    html += '<span class="page-link">...</span>';
                }
                html += '<button class="page-link" data-page="' + totalPaginas + '">' + totalPaginas + '</button>';
            }

            if (currentPage < totalPaginas) {
                html += '<button class="page-link" data-page="' + (currentPage + 1) + '">Siguiente</button>';
            }

            pagination.innerHTML = html;

            var pageButtons = pagination.querySelectorAll("button");

            pageButtons.forEach(function (button) {
                button.addEventListener("click", function () {
                    currentPage = parseInt(this.getAttribute("data-page"));
                    if (currentSortColumn === "price") {
                        ordenarTablaPorPrecio();
                    } else if (currentSortColumn === "date") {
                        ordenarTablaPorFecha();
                    }
                    mostrarFilas();
                    generarPaginacion();
                });
            });
        }

        var orderPriceLink = document.getElementById("orderPrice");
        orderPriceLink.addEventListener("click", function () {
            if (sortOrderPrice === "asc") {
                sortOrderPrice = "desc";
                document.getElementById("priceArrow").innerHTML = " &#129095;";
                document.getElementById("dateArrow").innerHTML = "";
            } else {
                sortOrderPrice = "asc";
                document.getElementById("priceArrow").innerHTML = "&#129093;";
                document.getElementById("dateArrow").innerHTML = "";
            }
            currentSortColumn = "price";
            ordenarTablaPorPrecio();
            mostrarFilas();
            generarPaginacion();
        });

        var orderDateLink = document.getElementById("orderDate");
        orderDateLink.addEventListener("click", function () {
            if (sortOrderDate === "asc") {
                sortOrderDate = "desc";
                document.getElementById("dateArrow").innerHTML = " &#129095;";
                document.getElementById("priceArrow").innerHTML = "";
            } else {
                sortOrderDate = "asc";
                document.getElementById("dateArrow").innerHTML = " &#129093;";
                document.getElementById("priceArrow").innerHTML = "";
            }
            currentSortColumn = "date";
            ordenarTablaPorFecha();
            mostrarFilas();
            generarPaginacion();
        });

        mostrarFilas();
        generarPaginacion();
    });
</script>
}