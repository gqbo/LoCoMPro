@page
@model LoCoMPro_LV.Pages.Lists.IndexModel

@{
    ViewData["Title"] = "Mis Listas";
}

<div class="container container-search index align-items-center">
    <div class="row">
        <div class="col-12 d-flex justify-content-center">
            <h1 class="title_add">Mi Lista</h1>
        </div>
    </div>
    <div class="row">
        <table class="table-list table table-striped" id="miTabla">
            <thead>
                <tr>
                    <th>
                        <a class="a-ordering" id="orderNameProduct">@Html.DisplayNameFor(model => model.Listed[0].NameProduct)</a>
                        <span class="arrow" id="NameProductArrow"></span>
                    </th>
                    <th class="report">
                        Eliminar
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var firstItem in Model.Listed)
                {
                    <tr>
                        <td>
                            <div class="table-item nombre">
                                @Html.DisplayFor(modelItem => firstItem.NameProduct)
                            </div>
                        </td>
                        <td>
                            <form method="post" asp-page-handler="EliminarItem" class="ml-auto">
                                <input type="hidden" id="nameProduct" value="@firstItem.NameProduct" name="NameProduct" asp-for="NameProduct">
                                <div class="table-item report">
                                    <input type="image" src="~/Images/borrar.png" alt="Eliminar" style="cursor: pointer;">
                                </div>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    </div>
</div>

<div id="pagination" class="pagination">
    <button id="previousPage" class="page-link">Anterior</button>
    <button id="nextPage" class="page-link">Siguiente</button>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var tabla = document.getElementById("miTabla");
        var tableBody = tabla.querySelector("tbody");
        var pagination = document.getElementById("pagination");
        var registrosPorPagina = 10;
        var currentPage = 1;
        var sortOrder = 1; // 1 para ascendente, -1 para descendente
        var currentSortColumn = null;

        // Esta función se encarga de mostrar las filas de la tabla que deben estar visibles en la página actual.
        // Filtra las filas según la página actual y oculta las demás.
        function mostrarFilas() {
            var filas = tableBody.querySelectorAll("tr");
            var inicio = (currentPage - 1) * registrosPorPagina;
            var fin = currentPage * registrosPorPagina;

            filas.forEach(function (fila, index) {
                if (index >= inicio && index < fin) {
                    fila.style.display = "table-row";
                } else {
                    fila.style.display = "none";
                }
            });
        }

        // Esta función se encarga de ordenar la tabla por el nombre del producto en orden ascendente o descendente.
        // Utiliza el valor de sortOrder para determinar el orden y actualiza la tabla en consecuencia.
        function ordenarTablaPorNombre() {
            var filas = Array.from(tableBody.querySelectorAll("tr"));

            filas.sort(function (a, b) {
                var valueA = a.querySelector(".table-item.nombre").textContent.trim();
                var valueB = b.querySelector(".table-item.nombre").textContent.trim();

                return sortOrder * valueA.localeCompare(valueB);
            });

            // Elimina las filas originales
            filas.forEach(function (fila) {
                tableBody.removeChild(fila);
            });

            // Agrega las filas ordenadas
            filas.forEach(function (fila) {
                tableBody.appendChild(fila);
            });
        }

        // Genera la paginación en la parte inferior de la tabla. Calcula el número de páginas y muestra los botones de
        // navegación para ir a páginas anteriores y siguientes. Además, muestra un número limitado de botones de página alrededor de la página actual.
        function generarPaginacion() {
            var filas = tableBody.querySelectorAll("tr");
            var totalRegistros = filas.length;
            var totalPaginas = Math.ceil(totalRegistros / registrosPorPagina);
            var paginaCercana = 2;

            var html = "";

            var inicioPaginacion = Math.max(1, currentPage - paginaCercana);
            var finPaginacion = Math.min(totalPaginas, currentPage + paginaCercana);

            if (currentPage > 1) {
                html += '<button class="page-link" data-page="' + (currentPage - 1) + '">Anterior</button>';
            }

            if (currentPage > (paginaCercana + 1)) {
                html += '<button class="page-link" data-page="1">1</button>';
                if (currentPage > (paginaCercana + 2)) {
                    html += '<span class="page-link">...</span>';
                }
            }

            for (var i = inicioPaginacion; i <= finPaginacion; i++) {
                var isCurrentPage = i === currentPage ? 'current-page' : '';
                html += '<button class="page-link ' + isCurrentPage + '" data-page="' + i + '">' + i + '</button>';
            }

            if (currentPage < (totalPaginas - paginaCercana)) {
                if (currentPage < (totalPaginas - paginaCercana - 1)) {
                    html += '<span class="page-link">...</span>';
                }
                html += '<button class="page-link" data-page="' + totalPaginas + '">' + totalPaginas + '</button>';
            }

            if (currentPage < totalPaginas) {
                html += '<button class="page-link" data-page="' + (currentPage + 1) + '">Siguiente</button>';
            }

            pagination.innerHTML = html;

            var pageButtons = pagination.querySelectorAll("button");

            pageButtons.forEach(function (button) {
                button.addEventListener("click", function () {
                    currentPage = parseInt(this.getAttribute("data-page"));
                    mostrarFilas();
                    generarPaginacion();
                });
            });
        }

        var orderNameProductLink = document.getElementById("orderNameProduct");
        orderNameProductLink.addEventListener("click", function () {
            sortOrder *= -1; // Cambiar entre ascendente y descendente
            if (sortOrder === 1) {
                document.getElementById("NameProductArrow").innerHTML = " &#129093;";
            } else {
                document.getElementById("NameProductArrow").innerHTML = " &#129095;";
            }
            currentSortColumn = "nameProduct";
            ordenarTablaPorNombre();
            mostrarFilas();
            generarPaginacion();
        });

        generarPaginacion();
        mostrarFilas();
    });
</script>
