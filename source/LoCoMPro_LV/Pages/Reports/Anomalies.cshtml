@page
@Html.AntiForgeryToken()
@model LoCoMPro_LV.Pages.Reports.AnomaliesModel
@{
    ViewData["Title"] = "Consulta";
}

<div class="container container-anomalie-buttons index align-items-center">
    <div class="row">
        <div class="col-12 d-flex justify-content-center">
            <button type="button" class="add_confirm anomalies-button" id="anomalies-date">Buscar Anomalías en Fecha</button>
            <button type="button" class="add_confirm anomalies-button" id="anomalies-price">Buscar Anomalías en Precio</button>
        </div>
    </div>
</div>

<div class="container container-anomalie-tittle index align-items-center">
    <div class="row">
        <div class="col-12 d-flex justify-content-center">
            <h1 class="title_add">Anomalías</h1>
        </div>
    </div>
</div>

<table class="table-anomalies table" id="miTabla">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Anomalies[0].Record.NameProduct)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Anomalies[0].NameGenerator)
            </th>
            <th>
                <a class="a-ordering" id="orderDate">
                    @Html.DisplayNameFor(model => model.Anomalies[0].RecordDate)
                </a>
                <span class="arrow" id="dateArrow"></span>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Anomalies[0].Type)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Anomalies[0].Comment)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var firstItem in Model.Anomalies)
        {

            <tr>
                <td>
                    <div class="table-item">
                        <a class="election" asp-page="./DetailsAnomalie" asp-route-NameGenerator="@firstItem.Record.NameGenerator" asp-route-RecordDate="@firstItem.Record.RecordDate.ToString("yyyy-MM-dd HH:mm:ss")">@Html.DisplayFor(modelItem => firstItem.Record.NameProduct)</a>
                    </div>
                </td>
                <td>
                    <div class="table-item">
                        @Html.DisplayFor(modelItem => firstItem.NameGenerator)
                    </div>
                </td>
                <td>
                    <div class="table-item fecha">
                        @Html.DisplayFor(modelItem => firstItem.RecordDate)
                    </div>
                </td>
                <td>
                    <div class="table-item">
                        @Html.DisplayFor(modelItem => firstItem.Type)
                    </div>
                </td>
                <td>
                    <div class="table-item">
                        @Html.DisplayFor(modelItem => firstItem.Comment)
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<div id="pagination" class="pagination">
    <button id="previousPage" class="page-link">Anterior</button>
    <button id="nextPage" class="page-link">Siguiente</button>
</div>

@section scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var tabla = document.getElementById("miTabla");
            var tableBody = tabla.querySelector("tbody");
            var pagination = document.getElementById("pagination");
            var registrosPorPagina = 10;
            var currentPage = 1;
            var sortOrderDate = "asc";
            var currentSortColumn = null;

            // Esta función se encarga de mostrar las filas de la tabla que deben estar visibles en la página actual.
            // Filtra las filas según la página actual y oculta las demás.
            function mostrarFilas() {
                var filas = tableBody.querySelectorAll("tr");
                var inicio = (currentPage - 1) * registrosPorPagina;
                var fin = currentPage * registrosPorPagina;

                filas.forEach(function (fila, index) {
                    if (index >= inicio && index < fin) {
                        fila.style.display = "table-row";
                    } else {
                        fila.style.display = "none";
                    }
                });
            }

            // Esta función se encarga de ordenar la tabla por la fecha de los registros en orden ascendente o descendente.
            // Utiliza el valor de sortOrderDate para determinar el orden y actualiza la tabla en consecuencia.
            function ordenarTablaPorFecha() {
                var filas = Array.from(tableBody.querySelectorAll("tr"));

                filas.sort(function (a, b) {
                    var dateA = new Date(a.querySelector(".fecha").textContent.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$2/$1/$3'));
                    var dateB = new Date(b.querySelector(".fecha").textContent.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$2/$1/$3'));

                    if (sortOrderDate === "asc") {
                        return dateA - dateB;
                    } else {
                        return dateB - dateA;
                    }
                });

                filas.forEach(function (fila) {
                    tableBody.removeChild(fila);
                });

                filas.forEach(function (fila) {
                    tableBody.appendChild(fila);
                });
            }

            // Genera la paginación en la parte inferior de la tabla. Calcula el número de páginas y muestra los botones de
            // navegación para ir a páginas anteriores y siguientes. Además, muestra un número limitado de botones de página alrededor de la página actual.
            function generarPaginacion() {
                var filas = tableBody.querySelectorAll("tr");
                var totalRegistros = filas.length;
                var totalPaginas = Math.ceil(totalRegistros / registrosPorPagina);
                var paginaCercana = 2;

                var html = "";

                var inicioPaginacion = Math.max(1, currentPage - paginaCercana);
                var finPaginacion = Math.min(totalPaginas, currentPage + paginaCercana);

                if (currentPage > 1) {
                    html += '<button class="page-link" data-page="' + (currentPage - 1) + '">Anterior</button>';
                }

                if (currentPage > (paginaCercana + 1)) {
                    html += '<button class="page-link" data-page="1">1</button>';
                    if (currentPage > (paginaCercana + 2)) {
                        html += '<span class="page-link">...</span>';
                    }
                }

                for (var i = inicioPaginacion; i <= finPaginacion; i++) {
                    var isCurrentPage = i === currentPage ? 'current-page' : '';
                    html += '<button class="page-link ' + isCurrentPage + '" data-page="' + i + '">' + i + '</button>';
                }

                if (currentPage < (totalPaginas - paginaCercana)) {
                    if (currentPage < (totalPaginas - paginaCercana - 1)) {
                        html += '<span class="page-link">...</span>';
                    }
                    html += '<button class="page-link" data-page="' + totalPaginas + '">' + totalPaginas + '</button>';
                }

                if (currentPage < totalPaginas) {
                    html += '<button class="page-link" data-page="' + (currentPage + 1) + '">Siguiente</button>';
                }

                pagination.innerHTML = html;

                var pageButtons = pagination.querySelectorAll("button");

                pageButtons.forEach(function (button) {
                    button.addEventListener("click", function () {
                        currentPage = parseInt(this.getAttribute("data-page"));
                        if (currentSortColumn === "precio") {
                            ordenarTablaPorPrecio();
                        } else if (currentSortColumn === "fecha") {
                            ordenarTablaPorFecha();
                        }
                        mostrarFilas();
                        generarPaginacion();
                    });
                });
            }

            var orderDateLink = document.getElementById("orderDate");
            orderDateLink.addEventListener("click", function () {
                if (sortOrderDate === "asc") {
                    sortOrderDate = "desc";
                    document.getElementById("dateArrow").innerHTML = " &#129095;";
                } else {
                    sortOrderDate = "asc";
                    document.getElementById("dateArrow").innerHTML = " &#129093;";
                }
                currentSortColumn = "date";
                ordenarTablaPorFecha();
                mostrarFilas();
                generarPaginacion();
            });

            mostrarFilas();
            generarPaginacion();
        });
    </script>

    <script>
        // Asocia la función al evento de clic en el documento, delegando a los elementos con los IDs específicos
        $(document).ready(function () {
            $(document).on('click', '#anomalies-date', function () {
                runAnomaliesFecha();
            });

            $(document).on('click', '#anomalies-price', function () {
                runAnomaliesPrecio();
            });
        });

        function runAnomaliesFecha() {
            $.ajax({
                type: 'POST',
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                url: '/Reports/Anomalies?handler=RunAnomaliesFecha',
                success: function () {
                    location.reload();
                }
            });
        }

        function runAnomaliesPrecio() {
            $.ajax({
                type: 'POST',
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                url: '/Reports/Anomalies?handler=RunAnomaliesPrecio',
                success: function () {
                    location.reload();
                }
            });
        }
    </script>
}